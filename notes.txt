When u write ran CAT in the terminal (shell window) the stdout is connected to 
to the terminal, where I can see the output.

process is just a running programm.

---
#stdin - standard input
#stdout - standard output
#stderr - standard error
---

#home directory - the directory where I started when I 1st logged in.
!Recursive delete - to repeatedly delete everything inside <dir>

<b>Globbing</b> - The <u>shell</u> can match simple pattern to FILE and DIRECTOTY names.
* - the glob character, which tells the shell to match ANY NUMBER of arbitrary characters.
e.x. rock@rock:~$ echo Do* 
    >> Documents Downloads
? - the glob character too, instructs the shell to match exactly ONE arbitrary character
e.x. rock@rock:~/looping$ echo ebook?.epub
    >> ebook1.epub ebook2.epub ebook3.epub ebook4.epub ebook5.epub

----
#grep - it's intermediate command and it prints the lines from a file or input stream that match an expression
    for instance, if I want to check every file in /etc that contains the word "root" I can use this command:
    rock@rock:~$ grep root /etc/*
----
standard error - it's an additional output stream for diagnostics and debugging;
    I can redirect the standard error if I like. For example, to send standard output to FILE.txt and standard error
    to ERROR.txt , use the syntex
                2>
        rock@rock:~/looping$ ls ebook1.epub >OUTCOME.txt  2>ERROR.txt // here I'm going to have two files
        rock@rock:~/looping$ ls ebook1.epub  2>ERROR.txt // if no error result would be displayed in stdout (Terminal)
    The number 2 specifies the stream  ID that the shell modifies. Stream ID 1 is stdout (the default), and 2 is standard error.

    <  - standard input Redirection;
    
!I can only access a file in a dir if the dir is executable!

            ## Archiving and Compressing Files ##
gzip - basically takes a file and makes it into a file.gz. The same file was "transformed"/compressed into gz. In order to unzip use command gunzip
tar cvf - "c" stands for Create, "v" - activates verbose diagnostic output; "f" - flag/file option, when we want to create a new archive and add the specific files, for instance
    rock@rock:~/looping$ tar cvf backup.tar *.bak  //create a new archive "backup.tar" and chuck all files which ends up with .bak. At that point all files
                                                  // with extention .bak haven't modified or touched
to unarchive/untar/unpack this file use this command:
    rock@rock:~/looping$ tar xvf backup.tar     // instead of "c" - create, "x" - extract(unpack) an archive.           

Other good thing is before unpacking(extracting) .tar file to check the content of it, or otherwise it's called "table-of-contents" it means using "t" flag instead of the "x"
flag. Having that info I can extract a specific file or directory. 
    rock@rock:~/looping$ tar tvf backup.tar // provides me content of the that archive;

Last thing regarding TAR, when I unpack files it's good to keep a "p" option in order to preserve permissions. Because of it I'm able to override UMASK and get exact permissions specefied 
in the archive.

I have to use two steps to compress a file/dir and later on archive it:
    gunzip file.tar.gz
    tar xvt file.tar
or I can use on command TAR w\ a flag "z" to automatically invoke gzip on the archive
    tar ztvf file.tar.gz // check the content, coz of the "t" flag 
            ## Archiving and Compressing Files ##

## Linux Directory Hierarchy Essentials ##

FHS - Filesystem Hierarchy Standard 

/etc - this core system cofiguration directory. Contains the user passwords, boot, device, networking and other setup files;
/proc - provides system stats, info about currently runnning processes as well as some kernel parameters.
/usr - Although is pronounced "user" but actually it does not contain user files. Instead, it contains a large dir Hierarchy, including 
       the bulk of the Linux system.
/var - all recorded info that can change over the course of time. Sys logging, user tracking....
/opt - other root subdirectory, contais third-party software.

## Linux Directory Hierarchy Essentials ##

/dev - device lists = device nodes; if this character "b"-block,"c"-character,"s"-socket, "p"-pipe it's "device"/file.

#Block device "b" - programs access data from a block device in fixed chunks. E.X "sda1"-disc partition SATA "/dev/sda" - is disc device a type of block device;
#Character device "c" - works with data stream it means I can only read chracters from or write characters to character devices.
                    Character device doesn't have a size. E.X. printers directly attached to your PC are represented by character devices.
#Pipe device - I/O stream at the other end.
#Socket device - are special-purpose interfaces that are frequently used for interprocess communication more info: https://www.youtube.com/watch?v=hsDxcJhCRLI&ab_channel=SecureRandom

dd program - useful when working w\ block and character devices. Wipe out a disck, back a disc, can create bootable USB drive; 
I think I can learn more about dd;
      if - input file;
      of - output file;
      bs - block size;

    rock@rock:~/linuxpocketguide$ dd if=dd_test.txt of=dd_test.someBlocks.txt bs=1 skip=19 count=49 
        here I copy a part of file, dd_test.txt to dd_test.someBlocks.txt  where I say "bs=1" block size 1 means one bit/one character in ASCII.
        "skip=19" - skip first bloks, in this case 19 bits; "count=49" - copy 49 blocks, 49 bits and that is it.

            ## Hard Discs /dev/sd* ##
Linux systems respond to Hard Disk with prefix "sd" but the kernel makes separate devices files, such sda or sdb for the partitions on a disc.
"sd" stands or SCSI Disc, where SCSI Small Computer Syetem Interface - was originally developed as hardware and protocl standart for communication between devices such as disk and other peripherals.
lsscsi - to list the SCSI devices on linux it works but on Mac doesn't.

rock@rock:~/linuxpocketguide$ lsscsi
[0:0:0:0]    cd/dvd  QEMU     QEMU CD-ROM      2.5+  /dev/sr0 //optical storage and in this case just read info if I'm looking for write I should find /dev/sg0
[N:0:0:1]    disk    QEMU NVMe Ctrl__1                          /dev/nvme0n1 //nvme* Non-Volatile Memory Devices to talk to smome Solid-State Storage/disk (SSD)

## Terminals /dev/tty*, /dev/pts/* ##
Terminals are devices for moving characters between a user process and I/O device, usually for text output to a terminal screen.
/dev/tty1 - the first virtual console
/dev/pts/0 - the 1st pseudoterminal device, where /dev/pts dir itself is a dedicated filesystem.

                ## DISK and FILESYSTEMS ##
The linux Logical Volume Manager (LVM).
The next layer up from disc partition is FileSystem - the DB of files and dir that I'm accustomend to interacting with in user space.

Tools for partitioning discs:
    *parted;
    *gparted;
    *fdisk
rock@rock:~/linuxpocketguide$ sudo parted -l

[sudo] password for rock: 
Model: Linux device-mapper (linear) (dm) //system uses LVM, coz Ubuntu is installed on VM UTM and apparantly, the partitions have been somehoe seprated from the partition tbl.
Disk /dev/mapper/ubuntu--vg-ubuntu--lv: 19.9GB
Sector size (logical/physical): 512B/512B
Partition Table: loop
Disk Flags: 

Number  Start  End     Size    File system  Flags
 1      0.00B  19.9GB  19.9GB  ext4


Model: QEMU NVMe Ctrl (nvme)
Disk /dev/nvme0n1: 21.5GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt //Globally Unique Identifier Partition Table
Disk Flags: 

Number  Start   End     Size    File system  Name  Flags
 1      1049kB  538MB   537MB   fat32              boot, esp
 2      538MB   1612MB  1074MB  ext4
 3      1612MB  21.5GB  19.9GB

To find out device(disk/USB) location I can use: "lsblk"
rock@rock:~$ lsblk

The process of attaching a filesystem to a running system is called "mounting", on UNIX.
mount point - is normal dir; therefore, mount a device on a mount point and it can be anywhere on the system. 
    For instance: /music would be a mount point for a filesystem conatining music;
    rock@rock:~$ mount // to look up the current filesystem status of the system